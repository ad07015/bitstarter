{"ts":1374146339883,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374146342130,"patch":[[{"diffs":[[1,"#!/usr/bin/env node\r\n/*\r\nAutomatically grade files for the presence of specified HTML tags/attributes.\r\nUses commander.js and cheerio. Teaches command line application development\r\nand basic DOM parsing.\r\n \r\nReferences:\r\n \r\n + cheerio\r\n   - https://github.com/MatthewMueller/cheerio\r\n   - http://encosia.com/cheerio-faster-windows-friendly-alternative-jsdom/\r\n   - http://maxogden.com/scraping-with-node.html\r\n \r\n + commander.js\r\n   - https://github.com/visionmedia/commander.js\r\n   - http://tjholowaychuk.com/post/9103188408/commander-js-nodejs-command-line-interfaces-made-easy\r\n \r\n + JSON\r\n   - http://en.wikipedia.org/wiki/JSON\r\n   - https://developer.mozilla.org/en-US/docs/JSON\r\n   - https://developer.mozilla.org/en-US/docs/JSON#JSON_in_Firefox_2\r\n*/\r\n \r\nvar fs = require('fs');\r\nvar rest = require('restler');\r\nvar program = require('commander');\r\nvar cheerio = require('cheerio');\r\nvar HTMLFILE_DEFAULT = \"index.html\";\r\nvar CHECKSFILE_DEFAULT = \"checks.json\";\r\n \r\nvar cheerioHtmlFile = function(htmlfile) {\r\n    return cheerio.load(fs.readFileSync(htmlfile));\r\n};\r\n \r\nvar loadChecks = function(checksfile) {\r\n    return JSON.parse(fs.readFileSync(checksfile));\r\n};\r\n \r\nvar checkHtmlFile = function(htmlfile, checksfile) {\r\n    $ = cheerioHtmlFile(htmlfile);\r\n    var checks = loadChecks(checksfile).sort();\r\n    var out = {};\r\n    for(var ii in checks) {\r\n        var present = $(checks[ii]).length > 0;\r\n        out[checks[ii]] = present;\r\n    }\r\n    return out;\r\n};\r\n \r\nvar clone = function(fn) {\r\n    // Workaround for commander.js issue.\r\n    // http://stackoverflow.com/a/6772648\r\n    return fn.bind({});\r\n};\r\n \r\nvar check_json_after_get = function(result, type) {\r\n    var checkJson = checkHtmlFile(program.file, program.checks)\r\n    console.log(JSON.stringify(checkJson, null, 4));\r\n};\r\n \r\nvar assertFileExists = function(infile) {\r\n    var instr = infile.toString();\r\n    console.log('%s', instr);\r\n    if(!fs.existsSync(instr)) {\r\n        console.log(\"%s does not exist. Exiting.\", instr);\r\n        process.exit(1); // http://nodejs.org/api/process.html#process_process_exit_code\r\n    }\r\n    check_json_after_get(instr, 'file');\r\n};\r\n \r\nvar getUrl = function(apiurl) {\r\n    rest.get(apiurl).on('complete', function(result) {\r\n        if (result instanceof Error) {\r\n            console.log('Error: ' + result.message);\r\n            process.exit(1);\r\n        } else {\r\n            program.file = 'tmp.txt';\r\n            fs.writeFileSync( program.file, result.toString());\r\n            check_json_after_get(result, 'url');\r\n        }\r\n})};\r\n \r\nif(require.main == module) {\r\n    program\r\n        .option('-c, --checks <check_file>', 'Path to checks.json', clone(assertFileExists), CHECKSFILE_DEFAULT)\r\n        .option('-f, --file <html_file>', 'Path to index.html')\r\n        .option('-u, --url <html_file>', 'Link to a url to index.html')\r\n        .parse(process.argv);\r\n    if(program.url) {\r\n        getUrl(program.url)\r\n    }  else { \r\n        assertFileExists(program.file);\r\n    }\r\n} else {\r\n    exports.checkHtmlFile = checkHtmlFile;\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3057}]],"length":3057,"saved":false}
